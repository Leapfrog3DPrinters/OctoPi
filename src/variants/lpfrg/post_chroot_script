#!/usr/bin/env bash
#set -x

source /common.sh
install_chroot_fail_on_error_trap

echo "--- Installing NetworkManager"
apt-get install --yes network-manager

echo "--- Removing interfaces from ifupdown"
pushd /etc/network
	sed -i "s@iface eth0@#iface eth0@g" interfaces
	sed -i "s@iface wlan0@#iface wlan0@g" interfaces
	sed -i "s@iface wlan1@#iface wlan1@g" interfaces
	sed -i "s@wpa-conf@#wpa-conf@g" interfaces
popd

echo "--- Copying additional LPFRG files"
unpack /filesystem/root /

echo "--- Setting owners and permissions"
# TODO: Find a neater way to handle this. Maybe use permissions in GIT?
chmod +r -R /etc/xdg

chmod +x /etc/rc.local

chown pi:pi /home/pi/.bash_aliases
chmod +x /home/pi/.bash_aliases

chown -hR pi:pi /home/pi/.config/chromium
chown -hR pi:pi /home/pi/.config/openbox

chown -hR pi:pi /home/pi/scripts
chown -hR pi:pi /home/pi/.octoprint
chmod +x /home/pi/scripts/enable_cursor
chmod +x /home/pi/scripts/disable_cursor
chmod +x /home/pi/scripts/rootrw

echo "--- Autostarting devmon"
# Autostart devmon on boot with user pi
echo "ARGS=\"\"" > /etc/conf.d/devmon
install -Dm644 /etc/systemd/system/devmon@.service /lib/systemd/system/devmon@.service
ln --symbolic /lib/systemd/system/devmon@.service /etc/systemd/system/multi-user.target.wants/devmon@pi.service

#cleanup
apt-get clean

pushd /home/pi
	if [ "$OCTOPI_INCLUDE_OCTOPRINT_LUI" == "yes" ]
 	then
		echo "--- Installing OctoPrint-LUI"

		gitclone OCTOPI_OCTOPRINT_LUI_REPO OctoPrint-LUI
		pushd OctoPrint-LUI
			PIP_DEFAULT_TIMEOUT=60 sudo -u pi /home/pi/$OCTOPI_OCTOPRINT_VENV_PATH/bin/python setup.py install
		popd
	fi

	if [ "$OCTOPI_INCLUDE_OCTOPRINT_FLASHARDUINO" == "yes" ]
 	then
		echo "--- Installing OctoPrint-flashArduino"

		gitclone OCTOPI_OCTOPRINT_FLASHARDUINO_REPO OctoPrint-flashArduino
		pushd OctoPrint-flashArduino
			PIP_DEFAULT_TIMEOUT=60 sudo -u pi /home/pi/$OCTOPI_OCTOPRINT_VENV_PATH/bin/python setup.py install
		popd

		echo "--- Installing avrdude"
		apt-get install --yes avrdude
	fi

	if [ "$OCTOPI_INCLUDE_OCTOPRINT_GCODERENDER" == "yes" ]
 	then
		echo "--- Installing OctoPrint-gcodeRender"

		gitclone OCTOPI_OCTOPRINT_GCODERENDER_REPO OctoPrint-gcodeRender
		pushd OctoPrint-gcodeRender
			PIP_DEFAULT_TIMEOUT=60 sudo -u pi /home/pi/$OCTOPI_OCTOPRINT_VENV_PATH/bin/python setup.py install
		popd
	fi

	if [ "$OCTOPI_INCLUDE_OCTOPRINT_NETWORKMANAGER" == "yes" ]
 	then
		echo "--- Installing OctoPrint-NetworkManager"

		gitclone OCTOPI_OCTOPRINT_NETWORKMANAGER_REPO OctoPrint-NetworkManager
		pushd OctoPrint-NetworkManager
			PIP_DEFAULT_TIMEOUT=60 sudo -u pi /home/pi/$OCTOPI_OCTOPRINT_VENV_PATH/bin/python setup.py install
		popd
	fi
popd

echo "--- Installing aasoftpoweroff"
chmod +x /etc/init.d/aasoftpoweroff
chmod +x /home/pi/scripts/poweroff.py
update-rc.d aasoftpoweroff defaults 

echo "--- Installing factoryreset" 
chmod +x /home/pi/scripts/factoryreset.py #executed by autostart

echo "--- Installing cleanupmounts"
chmod +x /etc/init.d/cleanupmounts
update-rc.d cleanupmounts defaults

echo "--- Installing dorotatetouch"
chmod +x /usr/bin/dorotatetouch

echo "--- Setting timezone"
pushd /home/pi
	echo "" >> .profile
	echo "TZ='Europe/Amsterdam'" >> .profile
	echo "export TZ" >> .profile
popd

echo "--- Setting plymouth theme"
plymouth-set-default-theme lpfrg

echo "--- Fixing plymouth"
rm /usr/share/initramfs-tools/scripts/init-bottom/plymouth
sed -i "/After=/s/$/ lightdm.service/" /lib/systemd/system/plymouth-quit.service
sed -i "/After=/s/$/ lightdm.service/" /lib/systemd/system/plymouth-quit-wait.service

sed -i "/ExecStart=/s/$/ --retain-splash/" /lib/systemd/system/plymouth-quit.service

echo "--- Remove ntp and installing htpdate"
apt-get purge --yes ntp
apt-get install --yes htpdate

# Allow time jumps
sed -i "s/HTP_OPTIONS=\(.*\)/HTP_OPTIONS=\"-D -s -t\"/" /etc/default/htpdate

echo "--- Installing syslog_copy"
chmod +x /usr/bin/copy_syslog
systemctl enable copy_syslog

echo "--- Installing (requirements for) LpfrgScreensaver"
apt-get install --yes python-gtk2 python-yaml python-pip
pip install requests
chown -hR pi:pi /home/pi/LpfrgScreensaver
chmod +x /home/pi/LpfrgScreensaver/lpfrgscreensaver.py

echo "--- Update pi password"
if [ -n $OCTOPI_PI_PASSWORD ]
then
	echo "pi:$OCTOPI_PI_PASSWORD" | chpasswd
fi

echo "--- Move NetworkManager configuration files"

# Make room for new files
mkdir -p /home/etc/NetworkManager
mkdir -p /home/etc/NetworkManager/system-connections 

# Remove old configuration files
if [ -f "/etc/NetworkManager/NetworkManager.conf" ]; then
	mv /etc/NetworkManager/NetworkManager.conf /home/etc/NetworkManager/NetworkManager.conf
fi

if [ -d "/etc/NetworkManager/system-connections" ]; then
	rm -r /etc/NetworkManager/system-connections
fi

# Create symlinks
mkdir /home/etc -p
ln --symbolic /home/etc/NetworkManager/NetworkManager.conf /etc/NetworkManager/NetworkManager.conf
ln --symbolic /home/etc/NetworkManager/system-connections /etc/NetworkManager/system-connections

# DHCP optimization (for boot speedup)
grep -q "noarp" /etc/dhcpcd.conf || echo "noarp" >> /etc/dhcpcd.conf
rm /etc/systemd/system/dhcpcd.service.d/wait.conf

echo "--- Move clock file"

# Create symlink for fake-hwclock
mkdir /home/etc -p
if [ -f "/etc/fake-hwclock.data" ]; then
	mv /etc/fake-hwclock.data /home/etc/fake-hwclock.data
fi
ln --symbolic /home/etc/fake-hwclock.data /etc/fake-hwclock.data

# Make sure we access the clock file after home has been mounted
sed -i "/Before=\(.*\)/a After=home.mount" /lib/systemd/system/fake-hwclock.service

#echo "--- Installing readahead"
#apt-get install --yes readahead-fedora

echo "--- Deleting ModemManager"
apt-get purge --yes ModemManager

echo "--- Enabling some GPIO pins on boot"
# As rootreadonly will do the initramfs update, it is not done here
chmod +x /usr/share/initramfs-tools/scripts/init-top/gpio_init

echo "--- Saving keyboard config"
rm /etc/console-setup/cached_*
setupcon --save # Boosts boot performance

echo "--- Removing NOOBS trace"
update-rc.d apply_noobs_os_config remove
rm /etc/init.d/apply_noobs_os_config

echo "--- Removing resize2fs_once"
if [ -f "/etc/init.d/resize2fs_once" ]; then
	update-rc.d resize2fs_once remove
	rm /etc/init.d/resize2fs_once
fi

# # Compile the dts file into a dtb file
# dtc -@ -I dts -O dtb -o /boot/overlays/gpio-lpfrg.dtb /boot/overlays/gpio-lpfrg.dts
# # Remove the source file
# rm /boot/overlays/gpio-lpfrg.dts

if [ -n $OCTOPI_LPFRG_DEVEL ]; then
	echo "--- Applying devel flavor"

	echo "-- Horizontal display"
	sed -i "s@display_rotate=1@display_rotate=0@" /boot/config.txt

	echo "-- High-res"
	sed -i "s@hdmi_cvt=1024 600@hdmi_cvt=1280 720@" /boot/config.txt

	echo "-- Enable cursor"
	sed -i "s@xserver-command=X -nocursor@#xserver-command=X -nocursor@" /etc/lightdm/lightdm.conf	

	echo "-- Keep root writable"
	sed -i "s@root_readonly=\"yes\"@root_readonly=\"no\"@" /boot/octopi.txt

	echo "-- Verbose booting"
	sed -i "s/tty6/tty1/" /boot/cmdline.txt
	sed -i "s/loglevel=[0-9] //" /boot/cmdline.txt
	sed -i "s/quiet //" /boot/cmdline.txt
	sed -i "s/splash //" /boot/cmdline.txt

	echo "-- Enabling SSH"
	touch /boot/ssh

	echo "-- Enable OctoPrint virtual printer"
	sed -i "/- virtual_printer/d" /home/pi/.octoprint/config.yaml
	sed -i "s@devel:@devel:\n  virtualPrinter:\n    enabled: true@" /home/pi/.octoprint/config.yaml
	sed -i "s@port: /dev/ttyUSB0@port: VIRTUAL@" /home/pi/.octoprint/config.yaml
	sed -i "s@log: false@log: true@" /home/pi/.octoprint/config.yaml

	echo "-- Installing dos2unix"
	apt-get install dos2unix --yes
fi

echo "--- Cleanup"
apt-get autoremove --yes